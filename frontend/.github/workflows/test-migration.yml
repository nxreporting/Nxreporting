name: Test Vercel + Supabase Migration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Setup test environment
      run: |
        cd frontend
        cp .env.example .env.test
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NANONETS_API_KEY: test-nanonets-key
        OPENAI_API_KEY: test-openai-key
        BLOB_READ_WRITE_TOKEN: test-blob-token

    - name: Generate Prisma client
      run: |
        cd frontend
        npx prisma generate

    - name: Run database migrations
      run: |
        cd frontend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:unit
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NANONETS_API_KEY: test-nanonets-key
        OPENAI_API_KEY: test-openai-key
        BLOB_READ_WRITE_TOKEN: test-blob-token

    - name: Run integration tests
      run: |
        cd frontend
        npm run test:integration
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NANONETS_API_KEY: test-nanonets-key
        OPENAI_API_KEY: test-openai-key
        BLOB_READ_WRITE_TOKEN: test-blob-token

    - name: Run API tests
      run: |
        cd frontend
        npm run test:api
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NANONETS_API_KEY: test-nanonets-key
        OPENAI_API_KEY: test-openai-key
        BLOB_READ_WRITE_TOKEN: test-blob-token

    - name: Run deployment validation tests
      run: |
        cd frontend
        npm run test:deployment
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NANONETS_API_KEY: test-nanonets-key
        OPENAI_API_KEY: test-openai-key
        BLOB_READ_WRITE_TOKEN: test-blob-token

    - name: Run comprehensive test suite
      run: |
        cd frontend
        npm run test:ci
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NANONETS_API_KEY: test-nanonets-key
        OPENAI_API_KEY: test-openai-key
        BLOB_READ_WRITE_TOKEN: test-blob-token

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          frontend/coverage/
          frontend/__tests__/test-reports/
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: frontend/coverage/lcov.info
        directory: frontend/coverage/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  deployment-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        NODE_ENV: production
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NANONETS_API_KEY: ${{ secrets.NANONETS_API_KEY }}
        BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}

    - name: Test production build
      run: |
        cd frontend
        npm start &
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        pkill -f "npm start"
      env:
        NODE_ENV: production
        JWT_SECRET: test-jwt-secret
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        NANONETS_API_KEY: test-key
        BLOB_READ_WRITE_TOKEN: test-token

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Check for vulnerabilities
      run: |
        cd frontend
        npm audit --audit-level high --production